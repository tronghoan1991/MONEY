import os
import pandas as pd
import psycopg2
from sqlalchemy import create_engine
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes
)
from datetime import datetime
import re
import joblib
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
import numpy as np
from flask import Flask
import threading
import warnings
import traceback

# ==== CONFIG ====
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# C√°c tham s·ªë t√πy ch·ªânh
ROLLING_WINDOW = 12        # Rolling window nh·ªè ƒë·ªÉ b·∫Øt trend nhanh
MIN_BATCH = 5
PROBA_CUTOFF = 0.62
PROBA_ALERT = 0.75
BAO_CUTOFF = 0.03
TRAIN_EVERY = 5
MODEL_PATH = "ml_stack.joblib"
MODEL_META = "ml_meta.txt"
SESSION_FILE = "session_time.txt"
LAST_PLAY_FILE = "last_play_time.txt"
MIN_SESSION_INPUT = 10
SESSION_BREAK_MINUTES = 30

if not BOT_TOKEN or not DATABASE_URL:
    print("L·ªói: Ch∆∞a set BOT_TOKEN ho·∫∑c DATABASE_URL.")
    raise Exception("B·∫°n c·∫ßn set BOT_TOKEN v√† DATABASE_URL ·ªü bi·∫øn m√¥i tr∆∞·ªùng!")

# ==== FLASK gi·ªØ c·ªïng ƒë·ªÉ tr√°nh sleep ====
def start_flask():
    app = Flask(__name__)

    @app.route('/')
    def home():
        return "Bot is alive!", 200

    @app.route('/healthz')
    def health():
        return "OK", 200

    app.run(host='0.0.0.0', port=10000)

threading.Thread(target=start_flask, daemon=True).start()

# ==== DB ====
def create_table():
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS history (
            id SERIAL PRIMARY KEY,
            input TEXT,
            actual TEXT,
            created_at TIMESTAMP DEFAULT NOW(),
            bot_predict TEXT
        );
    """)
    conn.commit()
    cur.close()
    conn.close()

def insert_result(input_str, actual, bot_predict=None):
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    now = datetime.now()
    if bot_predict is not None:
        cur.execute(
            "INSERT INTO history (input, actual, bot_predict, created_at) VALUES (%s, %s, %s, %s);",
            (input_str, actual, bot_predict, now)
        )
    else:
        cur.execute(
            "INSERT INTO history (input, actual, created_at) VALUES (%s, %s, %s);",
            (input_str, actual, now)
        )
    conn.commit()
    cur.close()
    conn.close()

def fetch_history(limit=10000):
    engine = create_engine(DATABASE_URL)
    df = pd.read_sql(
        "SELECT id, input, actual, bot_predict, created_at FROM history ORDER BY id ASC LIMIT %s" % limit,
        engine
    )
    engine.dispose()
    df = df[df['input'].str.match(r"^\d+\s+\d+\s+\d+$", na=False) | (df['input'] == "BOT_PREDICT")]
    return df

def delete_all_history():
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute("TRUNCATE TABLE history;")
    conn.commit()
    cur.close()
    conn.close()

# ==== FEATURE ENGINEERING N√ÇNG C·∫§P ====
def make_features(df):
    df = df[df['input'].str.match(r"^\d+\s+\d+\s+\d+$", na=False)].copy()
    df['total'] = df['input'].apply(lambda x: sum([int(i) for i in x.split()]))
    df['even'] = df['total'] % 2
    df['bao'] = df['input'].apply(lambda x: 1 if len(set(x.split()))==1 else 0)
    df['tai'] = (df['total'] >= 11).astype(int)
    df['xiu'] = (df['total'] <= 10).astype(int)
    df['chan'] = (df['even'] == 0).astype(int)
    df['le'] = (df['even'] == 1).astype(int)

    # Rolling
    roll_n = ROLLING_WINDOW
    df['tai_roll'] = df['tai'].rolling(roll_n, min_periods=1).mean()
    df['xiu_roll'] = df['xiu'].rolling(roll_n, min_periods=1).mean()
    df['chan_roll'] = df['chan'].rolling(roll_n, min_periods=1).mean()
    df['le_roll'] = df['le'].rolling(roll_n, min_periods=1).mean()
    df['bao_roll'] = df['bao'].rolling(roll_n, min_periods=1).mean()

    # Lag features
    for i in range(1, 4):
        df[f'tai_lag_{i}'] = df['tai'].shift(i)
        df[f'chan_lag_{i}'] = df['chan'].shift(i)

    # Streak features
    def get_streak(arr):
        streaks = [1]
        for i in range(1, len(arr)):
            if arr[i] == arr[i-1]:
                streaks.append(streaks[-1] + 1)
            else:
                streaks.append(1)
        return streaks
    df['tai_streak'] = get_streak(df['tai'].tolist())
    df['chan_streak'] = get_streak(df['chan'].tolist())
    return df

def train_models(df):
    # Ch·ªâ train rolling window m·ªõi nh·∫•t ƒë·ªÉ tr√°nh l√¢y nhi·ªÖm l·ªãch s·ª≠ c≈©
    df = df.tail(ROLLING_WINDOW*10)
    features = ['total', 'even', 'tai_roll', 'xiu_roll', 'chan_roll', 'le_roll', 'bao_roll',
                'tai_lag_1', 'tai_lag_2', 'tai_lag_3', 'chan_lag_1', 'chan_lag_2', 'chan_lag_3',
                'tai_streak', 'chan_streak']
    X = df[features].fillna(0)
    y_tx = (df['total'] >= 11).astype(int)
    y_cl = (df['even'] == 0).astype(int)
    y_bao = df['bao']
    models = {}
    for key, y in [('tx', y_tx), ('cl', y_cl), ('bao', y_bao)]:
        if len(set(y)) < 2:
            models[key] = None
            continue
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            lr = LogisticRegression().fit(X, y)
            rf = RandomForestClassifier(n_estimators=100).fit(X, y)
            xgbc = xgb.XGBClassifier(n_estimators=100, use_label_encoder=False, eval_metric='logloss').fit(X, y)
        models[key] = (lr, rf, xgbc)
    joblib.dump(models, MODEL_PATH)
    with open(MODEL_META, "w") as f:
        f.write(str(len(df)))

def load_models():
    if not os.path.exists(MODEL_PATH):
        return None
    return joblib.load(MODEL_PATH)

def summary_stats(df):
    if 'bot_predict' in df.columns:
        df_pred = df[(df['bot_predict'].notnull()) & (df['actual'].notnull())]
        so_du_doan = len(df_pred)
        dung = (df_pred['bot_predict'] == df_pred['actual']).sum()
        sai = so_du_doan - dung
        tile = round((dung / so_du_doan) * 100, 2) if so_du_doan else 0
        return so_du_doan, dung, sai, tile
    else:
        return 0, 0, 0, 0

def suggest_best_totals(df, prediction):
    if prediction not in ("T√†i", "X·ªâu") or df.empty:
        return "-"
    recent = df.tail(ROLLING_WINDOW)
    totals = [sum(int(x) for x in s.split()) for s in recent['input'] if s and s != "BOT_PREDICT"]
    if prediction == "T√†i":
        eligible = [t for t in range(11, 19)]
    else:
        eligible = [t for t in range(3, 11)]
    count = pd.Series([t for t in totals if t in eligible]).value_counts()
    if count.empty:
        return "-"
    best = count.index[:3].tolist()
    if not best:
        return "-"
    return f"{min(best)}‚Äì{max(best)}"

def predict_stacking(X_pred, models, key):
    if models[key] is None:
        return 0.5, [0.5, 0.5, 0.5]
    lr, rf, xgbc = models[key]
    prob_lr = lr.predict_proba(X_pred)[0][1]
    prob_rf = rf.predict_proba(X_pred)[0][1]
    prob_xgb = xgbc.predict_proba(X_pred)[0][1]
    probs = np.array([prob_lr, prob_rf, prob_xgb])
    return probs.mean(), probs

# === Detect trend reversal ===
def detect_trend_reversal(df, streak_min=5, n=ROLLING_WINDOW):
    # Ph√°t hi·ªán chu·ªói T√†i/X·ªâu ho·∫∑c Ch·∫µn/L·∫ª k√©o d√†i b·∫•t th∆∞·ªùng
    recent = df.tail(n)
    if len(recent) == 0: return False, None
    streak_tai = recent['tai_streak'].iloc[-1]
    last_tai = recent['tai'].iloc[-1]
    if streak_tai >= streak_min:
        return True, "T√†i" if last_tai == 1 else "X·ªâu"
    return False, None

PENDING_RESET = {}

def save_session_start(time=None):
    with open(SESSION_FILE, "w") as f:
        t = time if time else datetime.now().isoformat()
        f.write(str(t))

def load_session_start():
    if not os.path.exists(SESSION_FILE):
        return None
    with open(SESSION_FILE, "r") as f:
        t = f.read().strip()
    try:
        return datetime.fromisoformat(t)
    except Exception:
        return None

def save_last_play(time=None):
    with open(LAST_PLAY_FILE, "w") as f:
        t = time if time else datetime.now().isoformat()
        f.write(str(t))

def load_last_play():
    if not os.path.exists(LAST_PLAY_FILE):
        return None
    with open(LAST_PLAY_FILE, "r") as f:
        t = f.read().strip()
    try:
        return datetime.fromisoformat(t)
    except Exception:
        return None

# ==== BOT HANDLER b·ªçc try-except ====
def safe_handler(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            await func(update, context)
        except Exception as e:
            err = f"L·ªñI: {e}\n{traceback.format_exc()}"
            try:
                await update.message.reply_text("ü§ñ BOT g·∫∑p l·ªói k·ªπ thu·∫≠t:\n" + str(e))
            except:
                pass
            print(err)
    return wrapper

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    create_table()
    # X√°c nh·∫≠n l·ªánh reset
    if user_id in PENDING_RESET and PENDING_RESET[user_id]:
        if text.upper() == "X√ìA H·∫æT":
            delete_all_history()
            PENDING_RESET[user_id] = False
            await update.message.reply_text("‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu l·ªãch s·ª≠.")
        else:
            PENDING_RESET[user_id] = False
            await update.message.reply_text("‚ùå H·ªßy thao t√°c x√≥a.")
        return

    now = datetime.now()
    last_play = load_last_play()
    session_start = load_session_start()
    need_new_session = False
    minutes_since_last = None

    if last_play:
        delta = (now - last_play).total_seconds() / 60
        minutes_since_last = int(delta)
        if delta >= SESSION_BREAK_MINUTES:
            need_new_session = True
    else:
        need_new_session = True

    if need_new_session:
        save_session_start(now)
        if minutes_since_last:
            await update.message.reply_text(
                f"‚è∞ B·∫°n ƒë√£ kh√¥ng ch∆°i trong {minutes_since_last} ph√∫t. "
                f"H√£y nh·∫≠p t·ªëi ƒëa {MIN_SESSION_INPUT} phi√™n m·ªõi ƒë·ªÉ bot b·∫Øt l·∫°i trend session!"
            )
        else:
            await update.message.reply_text(
                f"‚è∞ B·∫Øt ƒë·∫ßu session m·ªõi! H√£y nh·∫≠p t·ªëi ƒëa {MIN_SESSION_INPUT} phi√™n m·ªõi ƒë·ªÉ bot b·∫Øt l·∫°i trend."
            )

    save_last_play(now)

    m = re.match(r"^(\d{3})$", text)
    m2 = re.match(r"^(\d+)\s+(\d+)\s+(\d+)$", text)
    if not (m or m2):
        await update.message.reply_text("Vui l√≤ng nh·∫≠p k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng: 456 ho·∫∑c 4 5 6.")
        return
    if m:
        numbers = [int(x) for x in list(m.group(1))]
    else:
        numbers = [int(m2.group(1)), int(m2.group(2)), int(m2.group(3))]
    # Ki·ªÉm tra h·ª£p l·ªá (gi√° tr·ªã x√∫c x·∫Øc 1‚Äì6)
    if any(n < 1 or n > 6 for n in numbers):
        await update.message.reply_text("K·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá. M·ªói s·ªë ph·∫£i t·ª´ 1‚Äì6!")
        return
    input_str = f"{numbers[0]} {numbers[1]} {numbers[2]}"
    total = sum(numbers)
    actual = "T√†i" if total >= 11 else "X·ªâu"

    df = fetch_history(10000)
    last_predict = None
    if len(df) > 0 and df.iloc[-1]['bot_predict']:
        last_predict = df.iloc[-1]['bot_predict']

    # S·ª≠a l·ªói ƒë√∫ng/sai
    if len(df) > 0 and df.iloc[-1]['input'] == "BOT_PREDICT" and (df.iloc[-1]['actual'] is None or pd.isnull(df.iloc[-1]['actual'])):
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        last_id = int(df.iloc[-1]['id'])
        cur.execute("UPDATE history SET actual=%s WHERE id=%s;", (actual, last_id))
        conn.commit()
        cur.close()
        conn.close()
    else:
        insert_result(input_str, actual, last_predict)

    df = fetch_history(10000)
    session_start = load_session_start()
    if session_start:
        df_session = df[df['created_at'] >= session_start]
    else:
        df_session = df
    if len(df_session[df_session['input'] != "BOT_PREDICT"]) < MIN_SESSION_INPUT:
        await update.message.reply_text(f"B·∫°n c·∫ßn nh·∫≠p t·ªëi ƒëa {MIN_SESSION_INPUT} phi√™n m·ªõi (sau khi b·∫Øt ƒë·∫ßu session) ƒë·ªÉ bot b·∫Øt ƒë·∫ßu d·ª± ƒëo√°n trend session hi·ªán t·∫°i!")
        return

    # Train model rolling window m·ªõi nh·∫•t
    df_feat = make_features(df)
    n_trained = 0
    if os.path.exists(MODEL_META):
        with open(MODEL_META, "r") as f:
            try:
                n_trained = int(f.read())
            except:
                n_trained = 0
    if len(df) >= MIN_BATCH and (len(df) - n_trained >= TRAIN_EVERY):
        train_models(df_feat)
    models = load_models()
    if (models is None or models['tx'] is None or models['cl'] is None):
        lines = [
            f"‚úîÔ∏è ƒê√£ l∆∞u k·∫øt qu·∫£: {''.join(str(n) for n in numbers)}",
            "‚ö†Ô∏è Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒëa d·∫°ng ƒë·ªÉ d·ª± ƒëo√°n (c·∫ßn ƒë·ªß c·∫£ T√†i/X·ªâu & Ch·∫µn/L·∫ª). Nh·∫≠p th√™m t·ªïng th·∫•p/cao, ch·∫µn/l·∫ª ƒë·ªÉ bot ho·∫°t ƒë·ªông ch√≠nh x√°c!"
        ]
        await update.message.reply_text('\n'.join(lines))
        return

    # D·ª± ƒëo√°n rolling trend
    df_feat_session = make_features(df_session)
    features = ['total', 'even', 'tai_roll', 'xiu_roll', 'chan_roll', 'le_roll', 'bao_roll',
                'tai_lag_1', 'tai_lag_2', 'tai_lag_3', 'chan_lag_1', 'chan_lag_2', 'chan_lag_3',
                'tai_streak', 'chan_streak']
    X_pred = df_feat_session.iloc[[-1]][features].fillna(0)
    tx_proba, tx_probs = predict_stacking(X_pred, models, 'tx')
    tx = "T√†i" if tx_proba >= 0.5 else "X·ªâu"
    cl_proba, cl_probs = predict_stacking(X_pred, models, 'cl')
    cl = "Ch·∫µn" if cl_proba >= 0.5 else "L·∫ª"
    dai_diem = suggest_best_totals(df_session, tx)
    bao_pct = "-"
    if models.get('bao') is not None:
        bao_proba, bao_probs = predict_stacking(X_pred, models, 'bao')
        bao_pct = round(bao_proba*100,2)
    else:
        bao_proba = None

    # L∆∞u d·ª± ƒëo√°n ƒë·ªÉ so s√°nh ƒë√∫ng/sai
    insert_result("BOT_PREDICT", None, tx)
    so_du_doan, dung, sai, tile = summary_stats(fetch_history(10000))
    lines = []
    lines.append(f"‚úîÔ∏è ƒê√£ l∆∞u k·∫øt qu·∫£: {''.join(str(n) for n in numbers)}")

    # B·∫Øt trend: c·∫£nh b√°o n·∫øu chu·ªói k√©o d√†i (reversal)
    trend_detected, trend_type = detect_trend_reversal(df_feat_session)
    if trend_detected:
        lines.append(f"‚ö°Ô∏è BOT ph√°t hi·ªán chu·ªói {trend_type} k√©o d√†i >=5 phi√™n! ƒê·ªÅ xu·∫•t c√¢n nh·∫Øc ƒë·∫£o chi·ªÅu ho·∫∑c ngh·ªâ.")

    # N·∫øu model d·ª± ƒëo√°n m·∫°nh
    if max(tx_proba, 1-tx_proba) >= PROBA_CUTOFF:
        lines.append(f"üéØ D·ª± ƒëo√°n: {tx} | {cl}")
    else:
        lines.append("‚ö†Ô∏è BOT kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ∆∞u th·∫ø r√µ r√†ng, n√™n ngh·ªâ phi√™n n√†y!")

    lines.append(f"D·∫£i ƒëi·ªÉm n√™n ƒë√°nh: {dai_diem}")

    if bao_pct != "-":
        lines.append(f"X√°c su·∫•t ra b√£o: {bao_pct}%")
        if bao_proba and bao_proba >= BAO_CUTOFF and models['bao'] is not None:
            lines.append(f"‚ùóÔ∏èC·∫¢NH B√ÅO: X√°c su·∫•t b√£o cao ({bao_pct}%) ‚Äì c√¢n nh·∫Øc v√†o b√£o!")
    else:
        lines.append(f"Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n b√£o.")
    if max(tx_proba, 1-tx_proba) >= PROBA_ALERT:
        lines.append(f"‚ùóÔ∏èC·∫¢NH B√ÅO: X√°c su·∫•t {tx} v∆∞·ª£t {int(PROBA_ALERT*100)}% ‚Äì trend c·ª±c m·∫°nh!")
    lines.append(f"BOT ƒë√£ d·ª± ƒëo√°n: {so_du_doan} phi√™n | ƒê√∫ng: {dung} | Sai: {sai} | T·ªâ l·ªá ƒë√∫ng: {tile}%")
    if max(tx_proba, 1-tx_proba) >= PROBA_CUTOFF:
        lines.append(f"Nh·∫≠n ƒë·ªãnh: ∆Øu ti√™n {tx}, {cl}, d·∫£i {dai_diem}. B√£o {bao_pct}% ‚Äì {'∆∞u ti√™n' if bao_proba and bao_proba >= BAO_CUTOFF and models['bao'] is not None else 'kh√¥ng n√™n ƒë√°nh'} b√£o.")
    else:
        lines.append("Nh·∫≠n ƒë·ªãnh: Kh√¥ng c√≥ c·ª≠a ∆∞u th·∫ø, n√™n ngh·ªâ.")
    await update.message.reply_text('\n'.join(lines))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "ü§ñ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Sicbo ML Bot N√¢ng C·∫•p!\n\n"
        "C√°c l·ªánh h·ªó tr·ª£:\n"
        "/start ‚Äì Xem h∆∞·ªõng d·∫´n v√† danh s√°ch l·ªánh\n"
        "/predict ‚Äì D·ª± ƒëo√°n phi√™n ti·∫øp theo\n"
        "/stats ‚Äì Th·ªëng k√™ hi·ªáu su·∫•t d·ª± ƒëo√°n\n"
        "/reset ‚Äì X√≥a to√†n b·ªô l·ªãch s·ª≠ data (c·∫ßn x√°c nh·∫≠n)\n"
        "Nh·∫≠p 3 s·ªë k·∫øt qu·∫£ (vd: 456 ho·∫∑c 4 5 6) ƒë·ªÉ l∆∞u v√† c·∫≠p nh·∫≠t model.\n"
        "BOT s·∫Ω c·∫£nh b√°o khi xu·∫•t hi·ªán trend m·∫°nh ho·∫∑c trend ƒë·∫£o chi·ªÅu!\n"
        f"N·∫øu ngh·ªâ qu√° {SESSION_BREAK_MINUTES} ph√∫t, bot s·∫Ω t·ª± ƒë·ªông y√™u c·∫ßu nh·∫≠p t·ªëi ƒëa {MIN_SESSION_INPUT} phi√™n ƒë·∫ßu ƒë·ªÉ b·∫Øt l·∫°i trend session!"
    )
    await update.message.reply_text(msg)

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = fetch_history(10000)
    session_start = load_session_start()
    if session_start:
        df_session = df[df['created_at'] >= session_start]
    else:
        df_session = df
    if len(df_session[df_session['input'] != "BOT_PREDICT"]) < MIN_SESSION_INPUT:
        await update.message.reply_text(f"B·∫°n c·∫ßn nh·∫≠p t·ªëi ƒëa {MIN_SESSION_INPUT} phi√™n m·ªõi (sau khi b·∫Øt ƒë·∫ßu session) ƒë·ªÉ bot b·∫Øt ƒë·∫ßu d·ª± ƒëo√°n trend session hi·ªán t·∫°i!")
        return
    df_feat = make_features(df)
    n_trained = 0
    if os.path.exists(MODEL_META):
        with open(MODEL_META, "r") as f:
            try:
                n_trained = int(f.read())
            except:
                n_trained = 0
    if len(df) - n_trained >= TRAIN_EVERY:
        train_models(df_feat)
    models = load_models()
    if (models is None or models['tx'] is None or models['cl'] is None):
        await update.message.reply_text("‚ö†Ô∏è Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒëa d·∫°ng ƒë·ªÉ d·ª± ƒëo√°n (l·ªãch s·ª≠ c·∫ßn ƒë·ªß c·∫£ T√†i/X·ªâu v√† Ch·∫µn/L·∫ª). Nh·∫≠p th√™m c√°c t·ªïng th·∫•p v√† cao, t·ªïng ch·∫µn/l·∫ª ƒë·ªÉ bot ho·∫°t ƒë·ªông ch√≠nh x√°c!")
        return
    df_feat_session = make_features(df_session)
    features = ['total', 'even', 'tai_roll', 'xiu_roll', 'chan_roll', 'le_roll', 'bao_roll',
                'tai_lag_1', 'tai_lag_2', 'tai_lag_3', 'chan_lag_1', 'chan_lag_2', 'chan_lag_3',
                'tai_streak', 'chan_streak']
    X_pred = df_feat_session.iloc[[-1]][features].fillna(0)
    tx_proba, _ = predict_stacking(X_pred, models, 'tx')
    cl_proba, _ = predict_stacking(X_pred, models, 'cl')
    tx = "T√†i" if tx_proba >= 0.5 else "X·ªâu"
    cl = "Ch·∫µn" if cl_proba >= 0.5 else "L·∫ª"
    dai_diem = suggest_best_totals(df_session, tx)
    bao_pct = "-"
    if models.get('bao') is not None:
        bao_proba, _ = predict_stacking(X_pred, models, 'bao')
        bao_pct = round(bao_proba*100,2)
    else:
        bao_proba = None
    insert_result("BOT_PREDICT", None, tx)
    so_du_doan, dung, sai, tile = summary_stats(fetch_history(10000))
    lines = []
    # B·∫Øt trend: c·∫£nh b√°o n·∫øu chu·ªói k√©o d√†i (reversal)
    trend_detected, trend_type = detect_trend_reversal(df_feat_session)
    if trend_detected:
        lines.append(f"‚ö°Ô∏è BOT ph√°t hi·ªán chu·ªói {trend_type} k√©o d√†i >=5 phi√™n! ƒê·ªÅ xu·∫•t c√¢n nh·∫Øc ƒë·∫£o chi·ªÅu ho·∫∑c ngh·ªâ.")
    if max(tx_proba, 1-tx_proba) >= PROBA_CUTOFF:
        lines.append(f"üéØ D·ª± ƒëo√°n: {tx} | {cl}")
    else:
        lines.append("‚ö†Ô∏è BOT kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ∆∞u th·∫ø r√µ r√†ng, n√™n ngh·ªâ phi√™n n√†y!")
    lines.append(f"D·∫£i ƒëi·ªÉm n√™n ƒë√°nh: {dai_diem}")
    if bao_pct != "-":
        lines.append(f"X√°c su·∫•t ra b√£o: {bao_pct}%")
        if bao_proba and bao_proba >= BAO_CUTOFF and models['bao'] is not None:
            lines.append(f"‚ùóÔ∏èC·∫¢NH B√ÅO: X√°c su·∫•t b√£o cao ({bao_pct}%) ‚Äì c√¢n nh·∫Øc v√†o b√£o!")
    else:
        lines.append(f"Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n b√£o.")
    if max(tx_proba, 1-tx_proba) >= PROBA_ALERT:
        lines.append(f"‚ùóÔ∏èC·∫¢NH B√ÅO: X√°c su·∫•t {tx} v∆∞·ª£t {int(PROBA_ALERT*100)}% ‚Äì trend c·ª±c m·∫°nh!")
    lines.append(f"BOT ƒë√£ d·ª± ƒëo√°n: {so_du_doan} phi√™n | ƒê√∫ng: {dung} | Sai: {sai} | T·ªâ l·ªá ƒë√∫ng: {tile}%")
    if max(tx_proba, 1-tx_proba) >= PROBA_CUTOFF:
        lines.append(f"Nh·∫≠n ƒë·ªãnh: ∆Øu ti√™n {tx}, {cl}, d·∫£i {dai_diem}. B√£o {bao_pct}% ‚Äì {'∆∞u ti√™n' if bao_proba and bao_proba >= BAO_CUTOFF and models['bao'] is not None else 'kh√¥ng n√™n ƒë√°nh'} b√£o.")
    else:
        lines.append("Nh·∫≠n ƒë·ªãnh: Kh√¥ng c√≥ c·ª≠a ∆∞u th·∫ø, n√™n ngh·ªâ.")
    await update.message.reply_text('\n'.join(lines))

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    df = fetch_history(10000)
    so_du_doan, dung, sai, tile = summary_stats(df)
    msg = (
        f"BOT ƒë√£ d·ª± ƒëo√°n: {so_du_doan} phi√™n\n"
        f"ƒê√∫ng: {dung}\n"
        f"Sai: {sai}\n"
        f"T·ªâ l·ªá ƒë√∫ng: {tile}%"
    )
    await update.message.reply_text(msg)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    PENDING_RESET[user_id] = True
    await update.message.reply_text(
        "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ data? "
        "N·∫øu ch·∫Øc ch·∫Øn, reply: X√ìA H·∫æT\n"
        "N·∫øu kh√¥ng, nh·∫≠p b·∫•t k·ª≥ k√Ω t·ª± n√†o kh√°c ƒë·ªÉ h·ªßy."
    )

def main():
    create_table()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", safe_handler(start)))
    app.add_handler(CommandHandler("predict", safe_handler(predict)))
    app.add_handler(CommandHandler("stats", safe_handler(stats)))
    app.add_handler(CommandHandler("reset", safe_handler(reset)))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, safe_handler(handle_message)))
    app.run_polling()

if __name__ == "__main__":
    main()
